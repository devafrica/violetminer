name: Build
on:
    push:
    pull_request:
    release:
        types: [published]

env:
  TAG: ${{ github.ref }}

jobs:
  # Common Build matrix for builds on Ubuntu VM
  ubuntu_build:
    name: ${{ matrix.build_name }}
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        # Add more compilers here if you need them
        build_name: ['Ubuntu GCC 7', 'Ubuntu GCC 8', 'Ubuntu Clang 8', 'aarch64']
        include:
          - build_name: 'Ubuntu GCC 7'
            package_name: 'gcc-7 g++-7'
            cc: gcc-7
            cxx: g++-7
            label: linux-gcc-7
            deployable: false
          - build_name: 'Ubuntu GCC 8'
            package_name: 'gcc-8 g++-8'
            cc: gcc-8
            cxx: g++-8
            label: linux
            deployable: true
          - build_name: 'Ubuntu Clang 8'
            cc: clang-8.0
            cxx: clang++-8.0
            label: linux-clang-8
            deployable: false
          - build_name: 'aarch64'
            label: aarch64
            deployable: true
    env:
      LABEL: ${{ matrix.label }}
    steps:
      - uses: actions/checkout@v1
    
      - name: Dependencies (Clang)
        if: matrix.build_name == 'Ubuntu Clang 8'
        run: |
           sudo add-apt-repository "deb http://apt.llvm.org/bionic/   llvm-toolchain-bionic-8 main"
           wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
           sudo apt-get install clang-8 libc++-8-dev

      # Fetch Dependencies
      - name: Dependencies
        if: matrix.build_name != 'aarch64'
        run: |
          CUDA_PATH="/usr/local/cuda"
          CUDA_BIN_PATH="/usr/local/cuda/bin"
          CUDA=10.1.243-1
          CUDA_SHORT=10.1.243-1
          UBUNTU_VERSION=ubuntu1804
          sudo apt update
          sudo apt install -y libboost-all-dev libssl-dev ${{ matrix.package_name }}
          git submodule update --init --recursive
          INSTALLER=cuda-repo-${UBUNTU_VERSION}_${CUDA}_amd64.deb
          wget http://developer.download.nvidia.com/compute/cuda/repos/${UBUNTU_VERSION}/x86_64/${INSTALLER}
          sudo dpkg -i ${INSTALLER}
          wget https://developer.download.nvidia.com/compute/cuda/repos/${UBUNTU_VERSION}/x86_64/7fa2af80.pub
          sudo apt-key add 7fa2af80.pub
          sudo apt update -qq
          sudo apt install -y cuda
          sudo apt clean
          CUDACXX=/usr/local/cuda/bin/nvcc
          /usr/local/cuda/bin/nvcc --version
          echo "${CUDACXX}"
      # Configure the project with cmake
      - name: Configure
        if: matrix.build_name != 'aarch64'
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
          CUDA_HOME: '/usr/local/cuda/'
          CUDACXX: '/usr/local/cuda/bin/nvcc'
        run: |
          mkdir build && cd build
          cmake -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc ..
      # Build for linux
      - name: Build
        if: matrix.build_name != 'aarch64'
        run: |
          cd build
          make -j2
      # Build for aarch64
      - name: Prepare and Build (aarch64)
        if: matrix.build_name == 'aarch64'
        run: |
          source scripts/prep-aarch64.sh
          mkdir build && cd build
          cmake ..
          make -j2
          TARGETS="violetminer"
          ${STRIP} ${TARGETS}
      # Test the crypto
      - name: Test Crypto
        if: matrix.build_name != 'aarch64'
        run: |
          cd build/
          ./argon2-cpp-test
      # Prepare for deploy
      - name: Prepare for Deploy
        id: before_deploy
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA}; fi
          cd build
          TARGETS="violetminer"
          if [[ "${LABEL}" != "aarch64" ]]; then strip ${TARGETS}; fi
          rm -rf violetminer-${LABEL}-${TAG}
          mkdir violetminer-${LABEL}-${TAG}
          cp -r ${TARGETS} violetminer-${LABEL}-${TAG}/
          rm -rf builds
          mkdir builds
          cp -r violetminer-${LABEL}-${TAG} builds
          echo ::set-output name=file_name::violetminer-${LABEL}-${TAG}
          ls
          pwd
      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release' && github.repository == 'turtlecoin/violetminer' && matrix.deployable
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/${{ steps.before_deploy.outputs.file_name }}
          asset_name: ${{ steps.before_deploy.outputs.file_name }}
          asset_content_type: application/gzip

      # Upload to GH Actions Artifacts
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: ${{ steps.before_deploy.outputs.file_name }}
          path: ./build/${{ steps.before_deploy.outputs.file_name }}

  # Mac builds on Catalina VM
  macos_build:
    name: macOS
    runs-on: macOS-latest
    env:
      CC: /usr/local/opt/llvm@8/bin/clang
      CXX: /usr/local/opt/llvm@8/bin/clang++
      LABEL: osx
    steps:
      - uses: actions/checkout@v1

      # Fetch Dependencies
      - name: Dependencies
        run: |
          brew install --force boost llvm@8
          brew link --force llvm@8
          ln -s /usr/local/opt/llvm@8 /usr/local/opt/llvm
          git submodule update --init --recursive
          brew install openssl || travis_retry brew upgrade openssl
          brew link --force openssl
          ln -s /usr/local/opt/openssl/include/openssl /usr/local/include
          curl -L http://developer.download.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.243_mac.dmg -o $HOME/cuda_10.1.243_mac.dmg
          curl -L https://developer.download.nvidia.com/compute/redist/cudnn/v7.6.2/cudnn-10.1-osx-x64-v7.6.2.24.tgz -o $HOME/cudnn-10.1-osx-x64-v7.6.2.24.tgz
          hdiutil mount $HOME/cuda_10.1.243_mac.dmg
          sleep 5
          sudo /Volumes/CUDAMacOSXInstaller/CUDAMacOSXInstaller.app/Contents/MacOS/CUDAMacOSXInstaller --accept-eula --no-window; export BREW_STATUS=$? 
          tar xvf $HOME/cudnn-10.1-osx-x64-v7.6.2.24.tgz
          sudo cp -r ./cuda/include/*.h /usr/local/cuda/include/
          sudo cp -r ./cuda/lib/*.dylib /usr/local/cuda/lib/
          sudo cp -r ./cuda/lib/*.a /usr/local/cuda/lib/
          sudo cp -r /usr/local/cuda/lib/* /usr/local/lib/
          sudo cp -r /usr/local/cuda/lib/libcuda.dylib /usr/local/cuda/lib/stubs/
          for f in /usr/local/cuda/lib/*.10.dylib; do sudo ln -s $f ${f/%.10.dylib/.10.1.dylib}; done
          cd $HOME/ccache-3.7/; ./configure; make; sudo make install; cd $TRAVIS_BUILD_DIR
          echo 'CCACHE_CC=/usr/local/cuda/bin/nvcc /usr/local/bin/ccache compiler "$@"' | sudo tee /usr/local/cuda/bin/nvcccache
          sudo chmod 755 /usr/local/cuda/bin/nvcccache

      # Configure project with cmake
      - name: Configure
        run: |
          mkdir build && cd build
          cmake -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc ..
      # Build for macOS
      - name: Build
        run: |
          cd build
          make -j2
      # Test the crypto
      - name: Test Crypto
        if: matrix.build_name != 'aarch64'
        run: |
          cd build
          ./argon2-cpp-test
      # Prepare for deploy
      - name: Prepare for Deploy
        id: before_deploy
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA}; fi
          cd build
          TARGETS="violetminer"
          if [[ "${LABEL}" != "aarch64" ]]; then strip ${TARGETS}; fi
          rm -rf violetminer-${LABEL}-${TAG}
          mkdir violetminer-${LABEL}-${TAG}
          cp -r ${TARGETS} violetminer-${LABEL}-${TAG}/
          rm -rf builds
          mkdir builds
          cp -r violetminer-${LABEL}-${TAG} builds
          echo ::set-output name=file_name::violetminer-${LABEL}-${TAG}
      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release' && github.repository == 'turtlecoin/violetminer'
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/src/${{ steps.before_deploy.outputs.file_name }}
          asset_name: ${{ steps.before_deploy.outputs.file_name }}
          asset_content_type: application/gzip

      # Upload to GH Actions Artifacts
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: ${{ steps.before_deploy.outputs.file_name }}
          path: ./build/src/${{ steps.before_deploy.outputs.file_name }}

  # Windows Builds on Windows Server 2019
  windows_build:
    name: Windows
    runs-on: windows-2019
    env:
      MSBUILD_PATH: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/MSBuild/Current/Bin"
      LABEL: windows
    steps:
      # Configure project with cmake
      - name: Configure
        run: |
          git submodule update --init --recursive
          mkdir build
          cd build
          cmake -G "Visual Studio 16 2019" -A x64 ..
      # Build for Windows
      - name: Build
        run: |
          $env:PATH = "$env:PATH;$env:MSBUILD_PATH"
          cd build
          MSBuild violetminer.sln /p:Configuration=Release /m
      # Test the crypto
      - name: Test Crypto
        shell: bash
        run: |
          cd build/Release
          ./cryptotest.exe
      # Prepare for deploy
      - name: Prepare for Deploy
        shell: bash
        id: before_deploy
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          cd build
          rm -rf violetminer-${LABEL}-${TAG}
          mkdir violetminer-${LABEL}-${TAG}
          cp -r violetminer.exe violetminer-${LABEL}-${TAG}
          rm -rf builds
          mkdir builds
          cp -r violetminer-${TAG}-${LABEL} builds
          echo ::set-output name=file_name::violetminer-${TAG}-${LABEL}

      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release' && github.repository == 'turtlecoin/violetminer'
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/src/Release/${{ steps.before_deploy.outputs.file_name }}
          asset_name: ${{ steps.before_deploy.outputs.file_name }}
          asset_content_type: application/zip

      # Upload to GH Actions Artifacts
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: ${{ steps.before_deploy.outputs.file_name }}
          path: ./build/src/Release/${{ steps.before_deploy.outputs.file_name }}
